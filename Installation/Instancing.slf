### Instancing
### A generic example file by Jane Yen and Carlo Sequin
############################################################################

# Surfaces
surface sBlue  color ( 0 0 1 ) endsurface
surface sRed  color ( 1 0 0 ) endsurface
surface sGreen  color ( 0 1 0 ) endsurface

############################################################################
# Tcl Sliders
############################################################################

tclinit{
  set winName .slfWINDOW

  source SLFCONSTS.tcl
  source SLIDEUI.tcl

###### Geometric Parameters #################
  proc CreateStarUI { parent name } {
    set subname "slf_[subst $name]"

    if { $parent == {} } {
	set root .$subname
    } elseif { $parent == "." } {
	set root .$subname
    } else {
	set root $parent.$subname
    }

    toplevel $root
    wm geometry $root +200+395

    set n  [CreateScaleCmd $name $root n  "number of instances"            4 3 20 1   1 horizontal CreateStar]
    set innerRadius [CreateScale $name $root innerRadius "inner radius" 0.5   0.1 3 0.01 1 horizontal]
    set outerRadius [CreateScale $name $root outerRadius "spike height" 1.0 0.1 3 0.01 1 horizontal]

    pack $n $innerRadius $outerRadius -side top -fill x
  }

###### Root Window with Shading Options #################
  proc CreateShadingUI { parent name } {
    set subname "slf_[subst $name]"

    if { $parent == {} } {
	set root .$subname
    } elseif { $parent == "." } {
	set root .$subname
    } else {
	set root $parent.$subname
    }

    toplevel $root
    wm geometry $root +180+230

    set shadingFrame [CreateShadingFrame $name $root]

    pack $shadingFrame -side left -fill y
  }

  CreateStarUI $winName star
  CreateShadingUI $winName gRoot

  ### GLOBAL VARIABLES
  global n 
  set n 0
}

############################################################################
# Instantiated Geometry with varying numbers of copies
############################################################################

tclinit {

  proc DeleteStar { } {
    global n
 
    if { $n == 0 } {
      return
    }

    ### Delete the object (instances deleted automatically)  
    slide delete object star
    #puts "slide delete object star"

    ### Delete the faces  
    for {set i 1} {$i <= $n} {incr i} {

      set name1 fp[subst $i]
      set name2 fs[subst $i]

      slide delete face $name1
      #puts "slide delete face $name1"

      slide delete face $name2
      #puts "slide delete face $name2"
    }    

    ### Delete the points
    for {set i 1} {$i <= $n} {incr i} {

      set name1 p[subst $i]
      set name2 s[subst $i]

      slide delete point $name1
      #puts "slide delete point $name1"

      slide delete point $name2
      #puts "slide delete point $name2"
    }    

    slide delete point pCenter
    #puts "slide delete point pCenter"
  }


  proc CreateStar { newN } {
    global SLF_PI n

    if { $newN <= 0 } {
      return
    }

    DeleteStar
 
    set n $newN

    set theta 0
    set thetaDelta [expr 2*$SLF_PI/$newN]

    ######################################
    ### Generate all the Points
    slide create point pCenter { 0 0 0 }

    for {set i 1} {$i <= $newN} {incr i} {

      ### N-gon point
      set name p[subst $i]

      set x [concat {$star_innerRadius} "* cos($theta)"]
      set y [concat {$star_innerRadius} "* sin($theta)"]

      #puts "Jane: $x"
      #puts "slide create point $name { {expr $star_innerRadius*cos($theta)} } "
      #eval "slide create point $name { {expr $star_innerRadius*cos($theta)} {expr $y} 0 }"

      slide create point $name \
	[list \
	  [list expr {$star_innerRadius} * cos($theta) ] \
	  [list expr {$star_innerRadius} * sin($theta) ] \
          0 \
        ]

      ### Star point
      set name s[subst $i]

      slide create point $name \
	[list \
	  [list expr ( {$star_outerRadius} + {$star_innerRadius} ) * cos($theta+$thetaDelta/2) ] \
	  [list expr ( {$star_outerRadius} + {$star_innerRadius} ) * sin($theta+$thetaDelta/2) ] \
          0 \
        ]

      set theta [expr $theta+$thetaDelta] 
    }

    ######################################
    ### Generate Faces
    set faces ""

    for {set i 1} {$i <= $newN} {incr i} {

      set name1 fp[subst [expr $i]]
      set name2 fs[subst [expr $i]]

      set faces [concat $faces "$name1 $name2"]

      if { $i != $newN } {

        set pts "pCenter p[subst [expr $i+0]] p[subst [expr $i+1]]" 
        slide create face $name1 $pts -surface sRed
        #puts "slide create face $name1 $pts -surface sRed"

        set pts "s[subst [expr $i+0]] p[subst [expr $i+1]] p[subst [expr $i+0]]" 
        slide create face $name2 $pts -surface sBlue
        #puts "slide create face $name2 $pts -surface sBlue"

      } else {

        set pts "pCenter p[subst [expr $i+0]] p1" 
        slide create face $name1 $pts -surface sRed
        #puts "slide create face $name1 $pts -surface sRed"

        set pts "s[subst [expr $i+0]] p1 p[subst [expr $i+0]]" 
        slide create face $name2 $pts -surface sBlue
        #puts "slide create face $name2 $pts -surface sBlue"
      }
    }
    
    ######################################
    ### Generate the Object
    slide create object star $faces
    #puts "slide create object star $faces"

    slide create instance i1 gWorld star
    #puts "slide create instance i1 gWorld star"
  }

   ### Initialize the world with some geometery
   CreateStar 3
}

group gWorld
  shading {expr $gRoot_shading}
endgroup

group gScene
  instance gWorld
  endinstance
endgroup

########################################################################################
### Illumination and Rendering
########################################################################################

light lite
  type SLF_DIRECTIONAL
endlight

group gLight
  instance lite
    id instLite

    lookat
      eye ( 0.5 1.0 1.0 )
      target ( 0.0 0.0 0.0 )
      up ( 0.0 1.0 0.0 )
    endlookat

  endinstance
endgroup

light lite2
  type SLF_AMBIENT
  color (0.25 0.25 0.25)
endlight

group gLight2
  instance lite2
    id instLite2
  endinstance
endgroup

camera cam
  projection SLF_PARALLEL
  frustum ( -2 -2 -10 ) ( 2 2 5 )
endcamera

group gCam
  instance cam
    id iCam
    translate ( 0 0 1 )
  endinstance
endgroup

window WINDOW
endwindow

viewport vp WINDOW
endviewport

render vp gCam.iCam.cam gScene
  light gLight.instLite.lite
  light gLight2.instLite2.lite2
endrender

########################################################################################




